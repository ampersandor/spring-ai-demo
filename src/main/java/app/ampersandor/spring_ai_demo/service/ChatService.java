package app.ampersandor.spring_ai_demo.service;

import app.ampersandor.spring_ai_demo.dto.EmotionEvaluation;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.client.advisor.api.Advisor;
import org.springframework.ai.chat.memory.ChatMemory;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;

@Service
@ConditionalOnProperty(name = "app.mode", havingValue = "chat")
public class ChatService {
    private final ChatClient chatClient;

    public ChatService(ChatClient.Builder chatClientBuilder, Advisor[] advisors) {
        // Attach advisors once at construction time so every request shares the same
        // behaviour.
        this.chatClient = chatClientBuilder.defaultAdvisors(advisors).build();
    }

    /**
     * Creates a request builder and injects cross-cutting metadata.
     * Advisors read {@link ChatMemory#CONVERSATION_ID} to load/store history.
     * Additional request-specific settings (e.g. temperature) live inside the
     * {@link Prompt} object.
     */
    private ChatClient.ChatClientRequestSpec buildChatClientRequestSpec(String conversationId, Prompt prompt) {
        return chatClient.prompt(prompt)
                .advisors(advisors -> advisors.param(ChatMemory.CONVERSATION_ID, conversationId));
    }

    /**
     * Streams the answer as a {@link Flux}. Useful for SSE or CLI scenarios.
     */
    public Flux<String> stream(String conversationId, Prompt prompt) {
        return buildChatClientRequestSpec(conversationId, prompt).stream().content();
    }

    /**
     * Performs a blocking call and returns the full {@link ChatResponse}.
     */
    public ChatResponse call(String conversationId, Prompt prompt) {
        return buildChatClientRequestSpec(conversationId, prompt).call().chatResponse();
    }

    /**
     * Projects the response payload into a domain-specific record.
     * Spring AI maps JSON fields generated by the model into
     * {@link EmotionEvaluation}.
     */
    public EmotionEvaluation callEmotionEvaluation(String conversationId, Prompt prompt) {
        return buildChatClientRequestSpec(conversationId, prompt).call().entity(EmotionEvaluation.class);
    }

}
